'use client';\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Box, IconButton, Chip, TextField, InputAdornment } from '@mui/material';\nimport { Search, Filter, TrendingUp, Verified, Share, Heart, MessageCircle, Bookmark } from 'lucide-react';\nimport { NeumorphicCard, CreatorProfileCard } from '../ui/NeumorphicCard';\nimport { VirtualizedList } from '../ui/VirtualizedList';\n\n// Types for the unified creative feed\ninterface CreativePost {\n  id: string;\n  creatorId: string;\n  creator: {\n    displayName: string;\n    username: string;\n    avatarUrl: string;\n    verificationLevel: number;\n    isVerified: boolean;\n  };\n  content: {\n    type: 'image' | 'video' | 'audio' | 'text' | 'mixed';\n    url?: string;\n    thumbnail?: string;\n    description: string;\n    hashtags: string[];\n    duration?: number; // for video/audio\n  };\n  platforms: {\n    platformId: string;\n    platformName: string;\n    originalUrl: string;\n    platformSpecificData?: any;\n  }[];\n  authenticity: {\n    score: number; // 0-100\n    verified: boolean;\n    riskFlags: string[];\n    c2paVerified: boolean;\n  };\n  engagement: {\n    likes: number;\n    comments: number;\n    shares: number;\n    saves: number;\n  };\n  timestamp: Date;\n  trending: boolean;\n}\n\ninterface FeedFilters {\n  platforms: string[];\n  contentTypes: string[];\n  authenticityThreshold: number;\n  trending: boolean;\n  verified: boolean;\n  timeRange: 'today' | 'week' | 'month' | 'all';\n}\n\nconst CreativeFeed: React.FC = () => {\n  // State management\n  const [posts, setPosts] = useState<CreativePost[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<FeedFilters>({\n    platforms: [],\n    contentTypes: [],\n    authenticityThreshold: 70,\n    trending: false,\n    verified: false,\n    timeRange: 'week'\n  });\n  const [showFilters, setShowFilters] = useState(false);\n  \n  // Memoized filtered posts\n  const filteredPosts = useMemo(() => {\n    return posts.filter(post => {\n      // Search filter\n      if (searchQuery) {\n        const searchLower = searchQuery.toLowerCase();\n        const matchesSearch = \n          post.creator.displayName.toLowerCase().includes(searchLower) ||\n          post.creator.username.toLowerCase().includes(searchLower) ||\n          post.content.description.toLowerCase().includes(searchLower) ||\n          post.content.hashtags.some(tag => tag.toLowerCase().includes(searchLower));\n        \n        if (!matchesSearch) return false;\n      }\n      \n      // Platform filter\n      if (filters.platforms.length > 0) {\n        const hasMatchingPlatform = post.platforms.some(p => \n          filters.platforms.includes(p.platformId)\n        );\n        if (!hasMatchingPlatform) return false;\n      }\n      \n      // Content type filter\n      if (filters.contentTypes.length > 0) {\n        if (!filters.contentTypes.includes(post.content.type)) return false;\n      }\n      \n      // Authenticity filter\n      if (post.authenticity.score < filters.authenticityThreshold) {\n        return false;\n      }\n      \n      // Trending filter\n      if (filters.trending && !post.trending) return false;\n      \n      // Verified filter\n      if (filters.verified && !post.creator.isVerified) return false;\n      \n      // Time range filter\n      const now = new Date();\n      const postAge = now.getTime() - post.timestamp.getTime();\n      const timeRanges = {\n        today: 24 * 60 * 60 * 1000,\n        week: 7 * 24 * 60 * 60 * 1000,\n        month: 30 * 24 * 60 * 60 * 1000,\n        all: Infinity\n      };\n      \n      if (postAge > timeRanges[filters.timeRange]) return false;\n      \n      return true;\n    });\n  }, [posts, searchQuery, filters]);\n  \n  // Load initial feed data\n  useEffect(() => {\n    loadFeedData();\n  }, []);\n  \n  const loadFeedData = async () => {\n    try {\n      setLoading(true);\n      // API call to load unified feed from all connected platforms\n      const response = await fetch('/api/feed/unified', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ filters, limit: 50 })\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        setPosts(data.posts);\n      }\n    } catch (error) {\n      console.error('Failed to load feed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Handle post interactions\n  const handleLike = useCallback(async (postId: string) => {\n    try {\n      await fetch(`/api/posts/${postId}/like`, { method: 'POST' });\n      setPosts(prev => prev.map(post => \n        post.id === postId \n          ? { ...post, engagement: { ...post.engagement, likes: post.engagement.likes + 1 }}\n          : post\n      ));\n    } catch (error) {\n      console.error('Failed to like post:', error);\n    }\n  }, []);\n  \n  const handleShare = useCallback(async (post: CreativePost) => {\n    try {\n      await navigator.share({\n        title: `${post.creator.displayName}'s creative content`,\n        text: post.content.description,\n        url: window.location.href\n      });\n      \n      // Track share\n      await fetch(`/api/posts/${post.id}/share`, { method: 'POST' });\n    } catch (error) {\n      console.error('Failed to share post:', error);\n    }\n  }, []);\n  \n  const handleSave = useCallback(async (postId: string) => {\n    try {\n      await fetch(`/api/posts/${postId}/save`, { method: 'POST' });\n      setPosts(prev => prev.map(post => \n        post.id === postId \n          ? { ...post, engagement: { ...post.engagement, saves: post.engagement.saves + 1 }}\n          : post\n      ));\n    } catch (error) {\n      console.error('Failed to save post:', error);\n    }\n  }, []);\n  \n  // Render individual post component\n  const renderPost = useCallback((post: CreativePost, index: number) => (\n    <motion.div\n      key={post.id}\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: index * 0.1, duration: 0.5 }}\n      style={{ marginBottom: '24px' }}\n    >\n      <NeumorphicCard variant=\"floating\" size=\"medium\" style={{ maxWidth: '600px', margin: '0 auto' }}>\n        {/* Post header */}\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n          <Box\n            sx={{\n              width: 48,\n              height: 48,\n              borderRadius: '50%',\n              background: 'linear-gradient(135deg, #6c5ce7, #a29bfe)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              mr: 2,\n              overflow: 'hidden'\n            }}\n          >\n            <img\n              src={post.creator.avatarUrl}\n              alt={post.creator.displayName}\n              style={{\n                width: '44px',\n                height: '44px',\n                borderRadius: '50%',\n                objectFit: 'cover'\n              }}\n            />\n          </Box>\n          \n          <Box sx={{ flex: 1 }}>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <span style={{ fontWeight: 600, fontSize: '16px' }}>\n                {post.creator.displayName}\n              </span>\n              {post.creator.isVerified && (\n                <Verified size={16} color=\"#6c5ce7\" />\n              )}\n              {post.trending && (\n                <TrendingUp size={16} color=\"#e17055\" />\n              )}\n            </Box>\n            <span style={{ color: '#636e72', fontSize: '14px' }}>\n              @{post.creator.username}\n            </span>\n          </Box>\n          \n          {/* Authenticity indicator */}\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1,\n              px: 2,\n              py: 0.5,\n              borderRadius: '20px',\n              background: post.authenticity.score > 80 \n                ? 'linear-gradient(135deg, #00b894, #55efc4)'\n                : post.authenticity.score > 60\n                ? 'linear-gradient(135deg, #fdcb6e, #ffeaa7)'\n                : 'linear-gradient(135deg, #e17055, #fab1a0)',\n              color: 'white',\n              fontSize: '12px',\n              fontWeight: 600\n            }}\n          >\n            {post.authenticity.c2paVerified && <Verified size={12} />}\n            {post.authenticity.score}% Authentic\n          </Box>\n        </Box>\n        \n        {/* Content */}\n        <Box sx={{ mb: 2 }}>\n          {post.content.type === 'image' && (\n            <Box\n              sx={{\n                borderRadius: '16px',\n                overflow: 'hidden',\n                mb: 2,\n                boxShadow: '0 8px 24px rgba(0,0,0,0.1)'\n              }}\n            >\n              <img\n                src={post.content.url}\n                alt=\"Post content\"\n                style={{\n                  width: '100%',\n                  height: 'auto',\n                  maxHeight: '400px',\n                  objectFit: 'cover'\n                }}\n              />\n            </Box>\n          )}\n          \n          {post.content.type === 'video' && (\n            <Box\n              sx={{\n                borderRadius: '16px',\n                overflow: 'hidden',\n                mb: 2,\n                boxShadow: '0 8px 24px rgba(0,0,0,0.1)',\n                position: 'relative'\n              }}\n            >\n              <video\n                poster={post.content.thumbnail}\n                controls\n                style={{\n                  width: '100%',\n                  height: 'auto',\n                  maxHeight: '400px'\n                }}\n              >\n                <source src={post.content.url} type=\"video/mp4\" />\n              </video>\n              \n              {post.content.duration && (\n                <Box\n                  sx={{\n                    position: 'absolute',\n                    bottom: 8,\n                    right: 8,\n                    px: 1,\n                    py: 0.5,\n                    borderRadius: '8px',\n                    background: 'rgba(0,0,0,0.7)',\n                    color: 'white',\n                    fontSize: '12px'\n                  }}\n                >\n                  {Math.floor(post.content.duration / 60)}:{(post.content.duration % 60).toString().padStart(2, '0')}\n                </Box>\n              )}\n            </Box>\n          )}\n          \n          {/* Description */}\n          <p style={{\n            fontSize: '16px',\n            lineHeight: 1.6,\n            color: '#2d3436',\n            margin: 0,\n            marginBottom: '12px'\n          }}>\n            {post.content.description}\n          </p>\n          \n          {/* Hashtags */}\n          {post.content.hashtags.length > 0 && (\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n              {post.content.hashtags.map(tag => (\n                <Chip\n                  key={tag}\n                  label={tag}\n                  size=\"small\"\n                  sx={{\n                    background: 'rgba(108, 92, 231, 0.1)',\n                    color: '#6c5ce7',\n                    fontWeight: 500,\n                    fontSize: '12px'\n                  }}\n                />\n              ))}\n            </Box>\n          )}\n        </Box>\n        \n        {/* Platform indicators */}\n        <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>\n          {post.platforms.map(platform => (\n            <Box\n              key={platform.platformId}\n              sx={{\n                px: 1.5,\n                py: 0.5,\n                borderRadius: '12px',\n                background: '#f8f9fa',\n                fontSize: '12px',\n                color: '#495057',\n                border: '1px solid #e9ecef'\n              }}\n            >\n              {platform.platformName}\n            </Box>\n          ))}\n        </Box>\n        \n        {/* Engagement actions */}\n        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n          <Box sx={{ display: 'flex', gap: 2 }}>\n            <motion.button\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              onClick={() => handleLike(post.id)}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: '8px',\n                background: 'none',\n                border: 'none',\n                cursor: 'pointer',\n                color: '#636e72',\n                fontSize: '14px'\n              }}\n            >\n              <Heart size={18} />\n              {post.engagement.likes}\n            </motion.button>\n            \n            <motion.button\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: '8px',\n                background: 'none',\n                border: 'none',\n                cursor: 'pointer',\n                color: '#636e72',\n                fontSize: '14px'\n              }}\n            >\n              <MessageCircle size={18} />\n              {post.engagement.comments}\n            </motion.button>\n            \n            <motion.button\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              onClick={() => handleShare(post)}\n              style={{\n                display: 'flex',\n                alignItems: 'center',\n                gap: '8px',\n                background: 'none',\n                border: 'none',\n                cursor: 'pointer',\n                color: '#636e72',\n                fontSize: '14px'\n              }}\n            >\n              <Share size={18} />\n              {post.engagement.shares}\n            </motion.button>\n          </Box>\n          \n          <motion.button\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            onClick={() => handleSave(post.id)}\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '8px',\n              background: 'none',\n              border: 'none',\n              cursor: 'pointer',\n              color: '#636e72',\n              fontSize: '14px'\n            }}\n          >\n            <Bookmark size={18} />\n            {post.engagement.saves}\n          </motion.button>\n        </Box>\n      </NeumorphicCard>\n    </motion.div>\n  ), [handleLike, handleShare, handleSave]);\n  \n  return (\n    <Box sx={{ maxWidth: '800px', mx: 'auto', p: 3 }}>\n      {/* Header */}\n      <Box sx={{ mb: 4 }}>\n        <h1 style={{\n          fontSize: '32px',\n          fontWeight: 700,\n          background: 'linear-gradient(135deg, #6c5ce7, #a29bfe)',\n          WebkitBackgroundClip: 'text',\n          WebkitTextFillColor: 'transparent',\n          margin: 0,\n          marginBottom: '8px'\n        }}>\n          Creative Feed\n        </h1>\n        <p style={{\n          fontSize: '16px',\n          color: '#636e72',\n          margin: 0\n        }}>\n          Discover authentic creative content across all platforms\n        </p>\n      </Box>\n      \n      {/* Search and filters */}\n      <Box sx={{ mb: 4 }}>\n        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search creators, content, hashtags...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <Search size={20} color=\"#636e72\" />\n                </InputAdornment>\n              ),\n              sx: {\n                borderRadius: '16px',\n                background: '#f8f9fa',\n                '& .MuiOutlinedInput-notchedOutline': {\n                  border: 'none'\n                },\n                boxShadow: 'inset 3px 3px 6px #d1d1d6, inset -3px -3px 6px #ffffff'\n              }\n            }}\n          />\n          \n          <IconButton\n            onClick={() => setShowFilters(!showFilters)}\n            sx={{\n              width: 48,\n              height: 48,\n              borderRadius: '12px',\n              background: showFilters ? '#6c5ce7' : '#f8f9fa',\n              color: showFilters ? 'white' : '#636e72',\n              boxShadow: showFilters \n                ? 'inset 3px 3px 6px rgba(108, 92, 231, 0.3)'\n                : '3px 3px 6px #d1d1d6, -3px -3px 6px #ffffff'\n            }}\n          >\n            <Filter size={20} />\n          </IconButton>\n        </Box>\n        \n        {/* Filter panel */}\n        <AnimatePresence>\n          {showFilters && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              <NeumorphicCard variant=\"pressed\" size=\"medium\" style={{ marginBottom: '16px' }}>\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\n                  {/* Platform filters */}\n                  <Box>\n                    <label style={{ fontSize: '14px', fontWeight: 600, display: 'block', marginBottom: '8px' }}>Platforms:</label>\n                    <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                      {['tiktok', 'instagram', 'youtube', 'linkedin'].map(platform => (\n                        <Chip\n                          key={platform}\n                          label={platform.charAt(0).toUpperCase() + platform.slice(1)}\n                          onClick={() => {\n                            setFilters(prev => ({\n                              ...prev,\n                              platforms: prev.platforms.includes(platform)\n                                ? prev.platforms.filter(p => p !== platform)\n                                : [...prev.platforms, platform]\n                            }));\n                          }}\n                          variant={filters.platforms.includes(platform) ? \"filled\" : \"outlined\"}\n                          color={filters.platforms.includes(platform) ? \"primary\" : \"default\"}\n                          size=\"small\"\n                        />\n                      ))}\n                    </Box>\n                  </Box>\n                  \n                  {/* Content type filters */}\n                  <Box>\n                    <label style={{ fontSize: '14px', fontWeight: 600, display: 'block', marginBottom: '8px' }}>Content Types:</label>\n                    <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\n                      {['image', 'video', 'audio', 'text'].map(type => (\n                        <Chip\n                          key={type}\n                          label={type.charAt(0).toUpperCase() + type.slice(1)}\n                          onClick={() => {\n                            setFilters(prev => ({\n                              ...prev,\n                              contentTypes: prev.contentTypes.includes(type)\n                                ? prev.contentTypes.filter(t => t !== type)\n                                : [...prev.contentTypes, type]\n                            }));\n                          }}\n                          variant={filters.contentTypes.includes(type) ? \"filled\" : \"outlined\"}\n                          color={filters.contentTypes.includes(type) ? \"primary\" : \"default\"}\n                          size=\"small\"\n                        />\n                      ))}\n                    </Box>\n                  </Box>\n                </Box>\n              </NeumorphicCard>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </Box>\n      \n      {/* Feed content */}\n      {loading ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>\n          <motion.div\n            animate={{ rotate: 360 }}\n            transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n            style={{\n              width: 40,\n              height: 40,\n              borderRadius: '50%',\n              border: '3px solid #f3f3f3',\n              borderTop: '3px solid #6c5ce7'\n            }}\n          />\n        </Box>\n      ) : (\n        <Box>\n          {filteredPosts.length === 0 ? (\n            <NeumorphicCard variant=\"raised\" size=\"large\" style={{ textAlign: 'center' }}>\n              <h3>No posts found</h3>\n              <p style={{ color: '#636e72' }}>Try adjusting your filters or search query</p>\n            </NeumorphicCard>\n          ) : (\n            <VirtualizedList\n              items={filteredPosts}\n              itemHeight={500} // Approximate height\n              renderItem={renderPost}\n              overscan={2}\n            />\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default CreativeFeed;
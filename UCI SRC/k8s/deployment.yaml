apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: creative-identity-app\n  namespace: creative-identity\n  labels:\n    app: creative-identity\n    component: frontend\n    version: v1\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 1\n  selector:\n    matchLabels:\n      app: creative-identity\n      component: frontend\n  template:\n    metadata:\n      labels:\n        app: creative-identity\n        component: frontend\n        version: v1\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"3000\"\n        prometheus.io/path: \"/api/metrics\"\n    spec:\n      serviceAccountName: creative-identity\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1001\n        fsGroup: 1001\n      containers:\n      - name: app\n        image: creative-identity-platform:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: http\n          protocol: TCP\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: PORT\n          value: \"3000\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: database-credentials\n              key: url\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: redis-credentials\n              key: url\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: jwt-secret\n        - name: STRIPE_SECRET_KEY\n          valueFrom:\n            secretKeyRef:\n              name: stripe-credentials\n              key: secret-key\n        - name: POLYGON_RPC_URL\n          valueFrom:\n            secretKeyRef:\n              name: blockchain-credentials\n              key: polygon-rpc\n        - name: PRIVATE_KEY\n          valueFrom:\n            secretKeyRef:\n              name: blockchain-credentials\n              key: private-key\n        - name: IPFS_NODE_URL\n          valueFrom:\n            configMapKeyRef:\n              name: app-config\n              key: ipfs-url\n        resources:\n          requests:\n            cpu: 500m\n            memory: 1Gi\n          limits:\n            cpu: 2\n            memory: 4Gi\n        livenessProbe:\n          httpGet:\n            path: /api/health\n            port: http\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /api/ready\n            port: http\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        volumeMounts:\n        - name: ai-models\n          mountPath: /app/models\n          readOnly: true\n        - name: tmp\n          mountPath: /tmp\n      volumes:\n      - name: ai-models\n        configMap:\n          name: ai-models\n      - name: tmp\n        emptyDir: {}\n      nodeSelector:\n        kubernetes.io/arch: amd64\n      tolerations:\n      - key: \"high-memory\"\n        operator: \"Equal\"\n        value: \"true\"\n        effect: \"NoSchedule\"\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: creative-identity-api\n  namespace: creative-identity\n  labels:\n    app: creative-identity\n    component: api\n    version: v1\nspec:\n  replicas: 5\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 2\n      maxUnavailable: 1\n  selector:\n    matchLabels:\n      app: creative-identity\n      component: api\n  template:\n    metadata:\n      labels:\n        app: creative-identity\n        component: api\n        version: v1\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"3000\"\n    spec:\n      serviceAccountName: creative-identity\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1001\n        fsGroup: 1001\n      containers:\n      - name: api\n        image: creative-identity-api:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3000\n          name: http\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: PORT\n          value: \"3000\"\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: database-credentials\n              key: url\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: redis-credentials\n              key: url\n        - name: JWT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: app-secrets\n              key: jwt-secret\n        resources:\n          requests:\n            cpu: 300m\n            memory: 512Mi\n          limits:\n            cpu: 1\n            memory: 2Gi\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: http\n          initialDelaySeconds: 15\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: http\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: creative-identity-websocket\n  namespace: creative-identity\n  labels:\n    app: creative-identity\n    component: websocket\n    version: v1\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: creative-identity\n      component: websocket\n  template:\n    metadata:\n      labels:\n        app: creative-identity\n        component: websocket\n        version: v1\n    spec:\n      serviceAccountName: creative-identity\n      containers:\n      - name: websocket\n        image: creative-identity-websocket:latest\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 3001\n          name: websocket\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: WEBSOCKET_PORT\n          value: \"3001\"\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: redis-credentials\n              key: url\n        resources:\n          requests:\n            cpu: 200m\n            memory: 256Mi\n          limits:\n            cpu: 500m\n            memory: 1Gi\n        livenessProbe:\n          tcpSocket:\n            port: websocket\n          initialDelaySeconds: 10\n          periodSeconds: 10\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: creative-identity-worker\n  namespace: creative-identity\n  labels:\n    app: creative-identity\n    component: worker\n    version: v1\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: creative-identity\n      component: worker\n  template:\n    metadata:\n      labels:\n        app: creative-identity\n        component: worker\n        version: v1\n    spec:\n      serviceAccountName: creative-identity\n      containers:\n      - name: worker\n        image: creative-identity-worker:latest\n        imagePullPolicy: IfNotPresent\n        env:\n        - name: NODE_ENV\n          value: \"production\"\n        - name: REDIS_URL\n          valueFrom:\n            secretKeyRef:\n              name: redis-credentials\n              key: url\n        - name: DATABASE_URL\n          valueFrom:\n            secretKeyRef:\n              name: database-credentials\n              key: url\n        - name: POLYGON_RPC_URL\n          valueFrom:\n            secretKeyRef:\n              name: blockchain-credentials\n              key: polygon-rpc\n        resources:\n          requests:\n            cpu: 300m\n            memory: 512Mi\n          limits:\n            cpu: 1\n            memory: 2Gi\n        livenessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - \"ps aux | grep '[n]ode' || exit 1\"\n          initialDelaySeconds: 30\n          periodSeconds: 30\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: postgres\n  namespace: creative-identity\n  labels:\n    app: postgres\n    component: database\nspec:\n  serviceName: postgres\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n      component: database\n  template:\n    metadata:\n      labels:\n        app: postgres\n        component: database\n    spec:\n      securityContext:\n        fsGroup: 999\n      containers:\n      - name: postgres\n        image: postgres:15-alpine\n        ports:\n        - containerPort: 5432\n          name: postgres\n        env:\n        - name: POSTGRES_DB\n          value: creative_identity\n        - name: POSTGRES_USER\n          valueFrom:\n            secretKeyRef:\n              name: database-credentials\n              key: username\n        - name: POSTGRES_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: database-credentials\n              key: password\n        - name: PGDATA\n          value: /var/lib/postgresql/data/pgdata\n        resources:\n          requests:\n            cpu: 500m\n            memory: 1Gi\n          limits:\n            cpu: 2\n            memory: 4Gi\n        volumeMounts:\n        - name: postgres-storage\n          mountPath: /var/lib/postgresql/data\n        livenessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - exec pg_isready -U \"$POSTGRES_USER\" -h 127.0.0.1 -p 5432\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n        readinessProbe:\n          exec:\n            command:\n            - /bin/sh\n            - -c\n            - exec pg_isready -U \"$POSTGRES_USER\" -h 127.0.0.1 -p 5432\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 1\n  volumeClaimTemplates:\n  - metadata:\n      name: postgres-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      storageClassName: fast-ssd\n      resources:\n        requests:\n          storage: 100Gi\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: redis\n  namespace: creative-identity\n  labels:\n    app: redis\n    component: cache\nspec:\n  serviceName: redis\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n      component: cache\n  template:\n    metadata:\n      labels:\n        app: redis\n        component: cache\n    spec:\n      containers:\n      - name: redis\n        image: redis:7-alpine\n        ports:\n        - containerPort: 6379\n          name: redis\n        command:\n        - redis-server\n        - /etc/redis/redis.conf\n        env:\n        - name: REDIS_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: redis-credentials\n              key: password\n        resources:\n          requests:\n            cpu: 200m\n            memory: 256Mi\n          limits:\n            cpu: 500m\n            memory: 1Gi\n        volumeMounts:\n        - name: redis-storage\n          mountPath: /data\n        - name: redis-config\n          mountPath: /etc/redis\n        livenessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          exec:\n            command:\n            - redis-cli\n            - ping\n          initialDelaySeconds: 5\n          periodSeconds: 5\n      volumes:\n      - name: redis-config\n        configMap:\n          name: redis-config\n  volumeClaimTemplates:\n  - metadata:\n      name: redis-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      storageClassName: fast-ssd\n      resources:\n        requests:\n          storage: 10Gi"
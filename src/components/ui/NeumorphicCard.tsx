'use client';\n\nimport React, { ReactNode } from 'react';\nimport { motion, MotionProps } from 'framer-motion';\nimport { styled } from '@mui/material/styles';\nimport { Box, BoxProps } from '@mui/material';\n\n// Neumorphic design system colors for Gen Z aesthetic\nconst neumorphicTheme = {\n  colors: {\n    background: '#f0f0f3',\n    surface: '#e6e6ea',\n    shadow: '#d1d1d6',\n    highlight: '#ffffff',\n    accent: '#6c5ce7',\n    text: '#2d3436',\n    textSecondary: '#636e72'\n  },\n  shadows: {\n    raised: '6px 6px 12px #d1d1d6, -6px -6px 12px #ffffff',\n    pressed: 'inset 6px 6px 12px #d1d1d6, inset -6px -6px 12px #ffffff',\n    floating: '8px 8px 16px #d1d1d6, -8px -8px 16px #ffffff',\n    subtle: '3px 3px 6px #d1d1d6, -3px -3px 6px #ffffff'\n  },\n  borderRadius: {\n    small: '12px',\n    medium: '16px',\n    large: '24px',\n    circle: '50%'\n  }\n};\n\ninterface NeumorphicCardProps extends BoxProps, Omit<MotionProps, 'children'> {\n  children: ReactNode;\n  variant?: 'raised' | 'pressed' | 'floating' | 'subtle';\n  size?: 'small' | 'medium' | 'large';\n  interactive?: boolean;\n  glowOnHover?: boolean;\n  animationDelay?: number;\n}\n\nconst StyledNeumorphicCard = styled(motion.div, {\n  shouldForwardProp: (prop) => \n    !['variant', 'size', 'interactive', 'glowOnHover'].includes(prop as string)\n})<{\n  variant: 'raised' | 'pressed' | 'floating' | 'subtle';\n  size: 'small' | 'medium' | 'large';\n  interactive: boolean;\n  glowOnHover: boolean;\n}>(({ variant, size, interactive, glowOnHover }) => {\n  const shadowMap = {\n    raised: neumorphicTheme.shadows.raised,\n    pressed: neumorphicTheme.shadows.pressed,\n    floating: neumorphicTheme.shadows.floating,\n    subtle: neumorphicTheme.shadows.subtle\n  };\n  \n  const sizeMap = {\n    small: {\n      padding: '16px',\n      borderRadius: neumorphicTheme.borderRadius.small\n    },\n    medium: {\n      padding: '24px',\n      borderRadius: neumorphicTheme.borderRadius.medium\n    },\n    large: {\n      padding: '32px',\n      borderRadius: neumorphicTheme.borderRadius.large\n    }\n  };\n  \n  return {\n    background: neumorphicTheme.colors.background,\n    boxShadow: shadowMap[variant],\n    borderRadius: sizeMap[size].borderRadius,\n    padding: sizeMap[size].padding,\n    border: 'none',\n    outline: 'none',\n    transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\n    position: 'relative',\n    overflow: 'hidden',\n    \n    ...(interactive && {\n      cursor: 'pointer',\n      userSelect: 'none',\n      \n      '&:hover': {\n        transform: 'translateY(-2px)',\n        boxShadow: variant === 'pressed' \n          ? neumorphicTheme.shadows.pressed\n          : `${shadowMap[variant]}, 0 8px 24px rgba(108, 92, 231, 0.15)`,\n        \n        ...(glowOnHover && {\n          '&::before': {\n            opacity: 1\n          }\n        })\n      },\n      \n      '&:active': {\n        transform: 'translateY(0)',\n        boxShadow: neumorphicTheme.shadows.pressed,\n        transition: 'all 0.1s ease'\n      }\n    }),\n    \n    ...(glowOnHover && {\n      '&::before': {\n        content: '\"\"',\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        background: `linear-gradient(135deg, \n          rgba(108, 92, 231, 0.1) 0%, \n          rgba(161, 196, 253, 0.1) 50%, \n          rgba(108, 92, 231, 0.1) 100%)`,\n        borderRadius: 'inherit',\n        opacity: 0,\n        transition: 'opacity 0.3s ease',\n        pointerEvents: 'none',\n        zIndex: 1\n      },\n      \n      '& > *': {\n        position: 'relative',\n        zIndex: 2\n      }\n    })\n  };\n});\n\nexport const NeumorphicCard: React.FC<NeumorphicCardProps> = ({\n  children,\n  variant = 'raised',\n  size = 'medium',\n  interactive = false,\n  glowOnHover = false,\n  animationDelay = 0,\n  ...motionProps\n}) => {\n  const defaultAnimation = {\n    initial: { opacity: 0, y: 20, scale: 0.95 },\n    animate: { \n      opacity: 1, \n      y: 0, \n      scale: 1,\n      transition: {\n        duration: 0.6,\n        delay: animationDelay,\n        ease: [0.4, 0, 0.2, 1]\n      }\n    },\n    whileHover: interactive ? {\n      scale: 1.02,\n      transition: { duration: 0.2, ease: 'easeOut' }\n    } : {},\n    whileTap: interactive ? {\n      scale: 0.98,\n      transition: { duration: 0.1, ease: 'easeInOut' }\n    } : {}\n  };\n  \n  const combinedProps = {\n    ...defaultAnimation,\n    ...motionProps\n  };\n  \n  return (\n    <StyledNeumorphicCard\n      variant={variant}\n      size={size}\n      interactive={interactive}\n      glowOnHover={glowOnHover}\n      {...combinedProps}\n    >\n      {children}\n    </StyledNeumorphicCard>\n  );\n};\n\n// Specialized neumorphic components for different use cases\n\ninterface NeumorphicButtonProps extends NeumorphicCardProps {\n  onClick?: () => void;\n  disabled?: boolean;\n  variant?: 'primary' | 'secondary' | 'ghost';\n}\n\nexport const NeumorphicButton: React.FC<NeumorphicButtonProps> = ({\n  children,\n  onClick,\n  disabled = false,\n  variant = 'primary',\n  size = 'medium',\n  ...props\n}) => {\n  const buttonVariants = {\n    primary: {\n      background: `linear-gradient(135deg, \n        ${neumorphicTheme.colors.accent} 0%, \n        #5f3dc4 100%)`,\n      color: 'white',\n      boxShadow: `${neumorphicTheme.shadows.raised}, \n        inset 0 1px 0 rgba(255, 255, 255, 0.1)`\n    },\n    secondary: {\n      background: neumorphicTheme.colors.background,\n      color: neumorphicTheme.colors.text,\n      boxShadow: neumorphicTheme.shadows.raised\n    },\n    ghost: {\n      background: 'transparent',\n      color: neumorphicTheme.colors.accent,\n      boxShadow: 'none',\n      border: `1px solid ${neumorphicTheme.colors.accent}20`\n    }\n  };\n  \n  return (\n    <StyledNeumorphicCard\n      as=\"button\"\n      onClick={disabled ? undefined : onClick}\n      disabled={disabled}\n      variant=\"raised\"\n      size={size}\n      interactive={!disabled}\n      glowOnHover\n      style={{\n        ...buttonVariants[variant],\n        opacity: disabled ? 0.6 : 1,\n        cursor: disabled ? 'not-allowed' : 'pointer',\n        border: 'none',\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontWeight: 600,\n        textTransform: 'none',\n        letterSpacing: '0.5px'\n      }}\n      whileHover={disabled ? {} : {\n        scale: 1.05,\n        boxShadow: `${buttonVariants[variant].boxShadow}, 0 8px 24px rgba(108, 92, 231, 0.25)`\n      }}\n      whileTap={disabled ? {} : {\n        scale: 0.95\n      }}\n      {...props}\n    >\n      {children}\n    </StyledNeumorphicCard>\n  );\n};\n\n// Creator profile card with neumorphic design\ninterface CreatorProfileCardProps {\n  creator: {\n    id: string;\n    displayName: string;\n    username: string;\n    bio: string;\n    avatarUrl: string;\n    verificationLevel: number;\n    platformCount: number;\n    totalFollowers: number;\n  };\n  onClick?: () => void;\n  animationDelay?: number;\n}\n\nexport const CreatorProfileCard: React.FC<CreatorProfileCardProps> = ({\n  creator,\n  onClick,\n  animationDelay = 0\n}) => {\n  return (\n    <NeumorphicCard\n      variant=\"floating\"\n      size=\"medium\"\n      interactive\n      glowOnHover\n      onClick={onClick}\n      animationDelay={animationDelay}\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        textAlign: 'center',\n        minHeight: '280px',\n        maxWidth: '320px'\n      }}\n    >\n      {/* Avatar with neumorphic frame */}\n      <Box\n        sx={{\n          width: 80,\n          height: 80,\n          borderRadius: '50%',\n          background: neumorphicTheme.colors.background,\n          boxShadow: neumorphicTheme.shadows.pressed,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          mb: 2,\n          overflow: 'hidden'\n        }}\n      >\n        <img\n          src={creator.avatarUrl}\n          alt={creator.displayName}\n          style={{\n            width: '70px',\n            height: '70px',\n            borderRadius: '50%',\n            objectFit: 'cover'\n          }}\n        />\n      </Box>\n      \n      {/* Creator info */}\n      <Box sx={{ mb: 2 }}>\n        <h3 style={{\n          margin: 0,\n          fontSize: '18px',\n          fontWeight: 600,\n          color: neumorphicTheme.colors.text,\n          marginBottom: '4px'\n        }}>\n          {creator.displayName}\n        </h3>\n        <p style={{\n          margin: 0,\n          fontSize: '14px',\n          color: neumorphicTheme.colors.textSecondary,\n          marginBottom: '8px'\n        }}>\n          @{creator.username}\n        </p>\n        \n        {/* Verification badge */}\n        <Box\n          sx={{\n            display: 'inline-flex',\n            alignItems: 'center',\n            px: 2,\n            py: 0.5,\n            borderRadius: '20px',\n            background: creator.verificationLevel > 75 \n              ? 'linear-gradient(135deg, #6c5ce7, #a29bfe)'\n              : neumorphicTheme.colors.surface,\n            color: creator.verificationLevel > 75 ? 'white' : neumorphicTheme.colors.text,\n            fontSize: '12px',\n            fontWeight: 600,\n            boxShadow: neumorphicTheme.shadows.subtle\n          }}\n        >\n          {creator.verificationLevel > 75 ? 'âœ“ Verified' : `${creator.verificationLevel}% Trust`}\n        </Box>\n      </Box>\n      \n      {/* Stats */}\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'space-around',\n          width: '100%',\n          mt: 'auto'\n        }}\n      >\n        <Box sx={{ textAlign: 'center' }}>\n          <div style={{\n            fontSize: '18px',\n            fontWeight: 600,\n            color: neumorphicTheme.colors.text\n          }}>\n            {creator.platformCount}\n          </div>\n          <div style={{\n            fontSize: '12px',\n            color: neumorphicTheme.colors.textSecondary\n          }}>\n            Platforms\n          </div>\n        </Box>\n        \n        <Box sx={{ textAlign: 'center' }}>\n          <div style={{\n            fontSize: '18px',\n            fontWeight: 600,\n            color: neumorphicTheme.colors.text\n          }}>\n            {creator.totalFollowers > 1000 \n              ? `${(creator.totalFollowers / 1000).toFixed(1)}K`\n              : creator.totalFollowers\n            }\n          </div>\n          <div style={{\n            fontSize: '12px',\n            color: neumorphicTheme.colors.textSecondary\n          }}>\n            Followers\n          </div>\n        </Box>\n      </Box>\n    </NeumorphicCard>\n  );\n};\n\n// Platform connection status card\ninterface PlatformStatusCardProps {\n  platform: {\n    id: string;\n    name: string;\n    icon: string;\n    connected: boolean;\n    lastSync?: Date;\n    status: 'connected' | 'syncing' | 'error' | 'disconnected';\n  };\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n}\n\nexport const PlatformStatusCard: React.FC<PlatformStatusCardProps> = ({\n  platform,\n  onConnect,\n  onDisconnect\n}) => {\n  const statusColors = {\n    connected: '#00b894',\n    syncing: '#fdcb6e',\n    error: '#e17055',\n    disconnected: '#636e72'\n  };\n  \n  return (\n    <NeumorphicCard\n      variant=\"raised\"\n      size=\"small\"\n      interactive\n      style={{\n        display: 'flex',\n        alignItems: 'center',\n        gap: '16px',\n        minHeight: '80px'\n      }}\n    >\n      {/* Platform icon */}\n      <Box\n        sx={{\n          width: 48,\n          height: 48,\n          borderRadius: '12px',\n          background: platform.connected \n            ? `linear-gradient(135deg, ${statusColors[platform.status]}, ${statusColors[platform.status]}90)`\n            : neumorphicTheme.colors.surface,\n          boxShadow: neumorphicTheme.shadows.subtle,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: '24px'\n        }}\n      >\n        {platform.icon}\n      </Box>\n      \n      {/* Platform info */}\n      <Box sx={{ flex: 1 }}>\n        <h4 style={{\n          margin: 0,\n          fontSize: '16px',\n          fontWeight: 600,\n          color: neumorphicTheme.colors.text,\n          marginBottom: '4px'\n        }}>\n          {platform.name}\n        </h4>\n        \n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          gap: '8px',\n          fontSize: '12px'\n        }}>\n          <span\n            style={{\n              display: 'inline-block',\n              width: '8px',\n              height: '8px',\n              borderRadius: '50%',\n              backgroundColor: statusColors[platform.status]\n            }}\n          />\n          <span style={{ color: neumorphicTheme.colors.textSecondary }}>\n            {platform.status === 'connected' && platform.lastSync\n              ? `Synced ${platform.lastSync.toLocaleDateString()}`\n              : platform.status.charAt(0).toUpperCase() + platform.status.slice(1)\n            }\n          </span>\n        </div>\n      </Box>\n      \n      {/* Action button */}\n      <NeumorphicButton\n        variant={platform.connected ? 'secondary' : 'primary'}\n        size=\"small\"\n        onClick={platform.connected ? onDisconnect : onConnect}\n        style={{\n          minWidth: '80px',\n          height: '36px',\n          fontSize: '12px'\n        }}\n      >\n        {platform.connected ? 'Disconnect' : 'Connect'}\n      </NeumorphicButton>\n    </NeumorphicCard>\n  );\n};\n\nexport default NeumorphicCard;
name: Creative Identity Platform CI/CD\n\non:\n  push:\n    branches: [ main, develop, staging ]\n  pull_request:\n    branches: [ main, develop ]\n  release:\n    types: [ published ]\n\nenv:\n  NODE_VERSION: '18'\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  # Code Quality & Security Checks\n  code-quality:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      with:\n        fetch-depth: 0\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Lint code\n      run: npm run lint\n    \n    - name: Type check\n      run: npm run type-check\n    \n    - name: Security audit\n      run: npm audit --audit-level=high\n    \n    - name: Code formatting check\n      run: npm run format:check\n    \n    - name: License check\n      run: npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'\n\n  # Unit Tests\n  unit-tests:\n    runs-on: ubuntu-latest\n    needs: code-quality\n    strategy:\n      matrix:\n        test-group: [identity, platforms, economy, blockchain, ui]\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Run unit tests - ${{ matrix.test-group }}\n      run: npm run test:unit:${{ matrix.test-group }}\n      env:\n        CI: true\n        NODE_ENV: test\n    \n    - name: Upload test results\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: unit-test-results-${{ matrix.test-group }}\n        path: |\n          test-results/\n          coverage/\n    \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage/lcov.info\n        flags: unit-tests-${{ matrix.test-group }}\n        name: unit-coverage-${{ matrix.test-group }}\n\n  # Smart Contract Tests\n  blockchain-tests:\n    runs-on: ubuntu-latest\n    needs: code-quality\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Compile smart contracts\n      run: npx hardhat compile\n    \n    - name: Run blockchain tests\n      run: npm run test:blockchain\n      env:\n        CI: true\n        NODE_ENV: test\n    \n    - name: Smart contract size check\n      run: npx hardhat size-contracts\n    \n    - name: Gas usage report\n      run: npx hardhat test --gas-reporter\n      env:\n        REPORT_GAS: true\n    \n    - name: Upload blockchain test results\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: blockchain-test-results\n        path: |\n          test-results/\n          gas-report.txt\n\n  # Integration Tests\n  integration-tests:\n    runs-on: ubuntu-latest\n    needs: [unit-tests, blockchain-tests]\n    services:\n      postgres:\n        image: postgres:15\n        env:\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: creative_identity_test\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7\n        options: >-\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 3s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Setup test database\n      run: npm run db:test:setup\n      env:\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/creative_identity_test\n    \n    - name: Run integration tests\n      run: npm run test:integration\n      env:\n        CI: true\n        NODE_ENV: test\n        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/creative_identity_test\n        REDIS_URL: redis://localhost:6379\n        JWT_SECRET: test-jwt-secret\n    \n    - name: Upload integration test results\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: integration-test-results\n        path: test-results/\n\n  # Build Docker Images\n  build-images:\n    runs-on: ubuntu-latest\n    needs: [unit-tests, blockchain-tests]\n    outputs:\n      image-digest: ${{ steps.build.outputs.digest }}\n      image-tag: ${{ steps.meta.outputs.tags }}\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Set up Docker Buildx\n      uses: docker/setup-buildx-action@v3\n    \n    - name: Log in to Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ${{ env.REGISTRY }}\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    \n    - name: Extract metadata\n      id: meta\n      uses: docker/metadata-action@v5\n      with:\n        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n        tags: |\n          type=ref,event=branch\n          type=ref,event=pr\n          type=sha,prefix={{branch}}-\n          type=semver,pattern={{version}}\n          type=semver,pattern={{major}}.{{minor}}\n    \n    - name: Build and push Docker image\n      id: build\n      uses: docker/build-push-action@v5\n      with:\n        context: .\n        target: runner\n        push: true\n        tags: ${{ steps.meta.outputs.tags }}\n        labels: ${{ steps.meta.outputs.labels }}\n        cache-from: type=gha\n        cache-to: type=gha,mode=max\n        build-args: |\n          NODE_ENV=production\n          NEXT_TELEMETRY_DISABLED=1\n\n  # End-to-End Tests\n  e2e-tests:\n    runs-on: ubuntu-latest\n    needs: build-images\n    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Install Playwright browsers\n      run: npx playwright install --with-deps\n    \n    - name: Start test environment\n      run: |\n        docker-compose -f docker-compose.test.yml up -d\n        sleep 30\n      env:\n        DOCKER_IMAGE: ${{ needs.build-images.outputs.image-tag }}\n    \n    - name: Wait for application to be ready\n      run: |\n        timeout 300 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 5; done'\n    \n    - name: Run E2E tests\n      run: npm run test:e2e\n      env:\n        CI: true\n        BASE_URL: http://localhost:3000\n    \n    - name: Upload E2E test results\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: e2e-test-results\n        path: |\n          test-results/\n          playwright-report/\n    \n    - name: Stop test environment\n      if: always()\n      run: docker-compose -f docker-compose.test.yml down\n\n  # Performance Tests\n  performance-tests:\n    runs-on: ubuntu-latest\n    needs: build-images\n    if: github.event_name == 'push' && github.ref == 'refs/heads/main'\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Node.js\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ env.NODE_VERSION }}\n        cache: 'npm'\n    \n    - name: Install dependencies\n      run: npm ci\n    \n    - name: Install K6\n      run: |\n        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69\n        echo \"deb https://dl.k6.io/deb stable main\" | sudo tee /etc/apt/sources.list.d/k6.list\n        sudo apt-get update\n        sudo apt-get install k6\n    \n    - name: Start performance test environment\n      run: |\n        docker-compose -f docker-compose.perf.yml up -d\n        sleep 60\n      env:\n        DOCKER_IMAGE: ${{ needs.build-images.outputs.image-tag }}\n    \n    - name: Run performance tests\n      run: npm run test:performance\n      env:\n        BASE_URL: http://localhost:3000\n    \n    - name: Upload performance test results\n      uses: actions/upload-artifact@v3\n      if: always()\n      with:\n        name: performance-test-results\n        path: performance-results/\n    \n    - name: Performance regression check\n      run: npm run test:performance:compare\n\n  # Security Scanning\n  security-scan:\n    runs-on: ubuntu-latest\n    needs: build-images\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Run Trivy vulnerability scanner\n      uses: aquasecurity/trivy-action@master\n      with:\n        image-ref: ${{ needs.build-images.outputs.image-tag }}\n        format: 'sarif'\n        output: 'trivy-results.sarif'\n    \n    - name: Upload Trivy scan results to GitHub Security tab\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: 'trivy-results.sarif'\n    \n    - name: Run Snyk security scan\n      uses: snyk/actions/node@master\n      env:\n        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n      with:\n        args: --severity-threshold=high\n    \n    - name: Upload Snyk results to GitHub Security tab\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: snyk.sarif\n\n  # Deploy to Staging\n  deploy-staging:\n    runs-on: ubuntu-latest\n    needs: [integration-tests, build-images, security-scan]\n    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'\n    environment:\n      name: staging\n      url: https://staging.creativeidentity.platform\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}\n    \n    - name: Deploy to staging\n      run: |\n        sed -i 's|IMAGE_TAG|${{ needs.build-images.outputs.image-tag }}|g' k8s/staging/deployment.yaml\n        kubectl apply -f k8s/staging/\n    \n    - name: Wait for deployment\n      run: |\n        kubectl rollout status deployment/creative-identity-app -n creative-identity-staging --timeout=600s\n    \n    - name: Run smoke tests\n      run: npm run test:smoke\n      env:\n        BASE_URL: https://staging.creativeidentity.platform\n    \n    - name: Notify deployment\n      uses: 8398a7/action-slack@v3\n      with:\n        status: ${{ job.status }}\n        channel: '#deployments'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n\n  # Deploy to Production\n  deploy-production:\n    runs-on: ubuntu-latest\n    needs: [integration-tests, build-images, security-scan, e2e-tests]\n    if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n    environment:\n      name: production\n      url: https://creativeidentity.platform\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}\n    \n    - name: Blue-Green deployment\n      run: |\n        # Update green deployment\n        sed -i 's|IMAGE_TAG|${{ needs.build-images.outputs.image-tag }}|g' k8s/production/deployment-green.yaml\n        kubectl apply -f k8s/production/deployment-green.yaml\n        \n        # Wait for green deployment to be ready\n        kubectl rollout status deployment/creative-identity-app-green -n creative-identity-production --timeout=600s\n        \n        # Run production smoke tests on green\n        npm run test:smoke\n        \n        # Switch traffic to green\n        kubectl patch service creative-identity-app -n creative-identity-production -p '{\"spec\":{\"selector\":{\"version\":\"green\"}}}'\n        \n        # Cleanup old blue deployment\n        kubectl delete deployment creative-identity-app-blue -n creative-identity-production --ignore-not-found\n        \n        # Rename green to blue for next deployment\n        kubectl patch deployment creative-identity-app-green -n creative-identity-production -p '{\"metadata\":{\"name\":\"creative-identity-app-blue\"},\"spec\":{\"selector\":{\"matchLabels\":{\"version\":\"blue\"}},\"template\":{\"metadata\":{\"labels\":{\"version\":\"blue\"}}}}}'\n      env:\n        BASE_URL: https://creativeidentity.platform\n    \n    - name: Database migration\n      run: |\n        kubectl create job db-migrate-$(date +%s) --from=cronjob/db-migrate -n creative-identity-production\n    \n    - name: Notify production deployment\n      uses: 8398a7/action-slack@v3\n      with:\n        status: ${{ job.status }}\n        channel: '#production'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n        text: '🚀 Creative Identity Platform deployed to production'\n\n  # Rollback on Failure\n  rollback:\n    runs-on: ubuntu-latest\n    needs: deploy-production\n    if: failure()\n    environment:\n      name: production\n    steps:\n    - name: Configure kubectl\n      uses: azure/k8s-set-context@v3\n      with:\n        method: kubeconfig\n        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}\n    \n    - name: Rollback deployment\n      run: |\n        kubectl rollout undo deployment/creative-identity-app -n creative-identity-production\n        kubectl rollout status deployment/creative-identity-app -n creative-identity-production --timeout=300s\n    \n    - name: Notify rollback\n      uses: 8398a7/action-slack@v3\n      with:\n        status: 'warning'\n        channel: '#production'\n        webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n        text: '⚠️ Production deployment failed and was rolled back'\n\n  # Cleanup\n  cleanup:\n    runs-on: ubuntu-latest\n    needs: [deploy-staging, deploy-production]\n    if: always()\n    steps:\n    - name: Cleanup old container images\n      run: |\n        # Keep only the 10 most recent images\n        echo \"Cleaning up old container images...\"\n        # This would typically use a registry API or tool\n    \n    - name: Cleanup test artifacts\n      run: |\n        echo \"Cleaning up test artifacts...\"\n        # Cleanup temporary resources used during testing"
import { HardhatRuntimeEnvironment } from 'hardhat/types';\nimport { DeployFunction } from 'hardhat-deploy/types';\n\nconst func: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {\n  const { deployments, getNamedAccounts, network } = hre;\n  const { deploy } = deployments;\n  const { deployer } = await getNamedAccounts();\n  \n  console.log(`\\nüöÄ Deploying Creative Identity Platform contracts to ${network.name}...`);\n  console.log(`Deployer: ${deployer}`);\n  \n  // Deploy Creative Identity Registry\n  console.log('\\nüìã Deploying Creative Identity Registry...');\n  const identityRegistry = await deploy('CreativeIdentityRegistry', {\n    from: deployer,\n    args: [],\n    log: true,\n    waitConfirmations: network.name === 'hardhat' ? 1 : 5,\n    gasLimit: 4000000,\n  });\n  \n  console.log(`‚úÖ Creative Identity Registry deployed to: ${identityRegistry.address}`);\n  \n  // Deploy Content Licensing Contract\n  console.log('\\nüé® Deploying Content Licensing Contract...');\n  const contentLicensing = await deploy('ContentLicensingContract', {\n    from: deployer,\n    args: [],\n    log: true,\n    waitConfirmations: network.name === 'hardhat' ? 1 : 5,\n    gasLimit: 5000000,\n  });\n  \n  console.log(`‚úÖ Content Licensing Contract deployed to: ${contentLicensing.address}`);\n  \n  // Deploy Collaboration Contract Factory\n  console.log('\\nü§ù Deploying Collaboration Contract...');\n  const collaborationContract = await deploy('CollaborationContract', {\n    from: deployer,\n    args: [],\n    log: true,\n    waitConfirmations: network.name === 'hardhat' ? 1 : 5,\n    gasLimit: 3000000,\n  });\n  \n  console.log(`‚úÖ Collaboration Contract deployed to: ${collaborationContract.address}`);\n  \n  // Set up initial configuration if not on hardhat\n  if (network.name !== 'hardhat') {\n    console.log('\\n‚öôÔ∏è Setting up initial configuration...');\n    \n    const { ethers } = hre;\n    const identityContract = await ethers.getContractAt(\n      'CreativeIdentityRegistry',\n      identityRegistry.address\n    );\n    \n    // Add initial verification oracles\n    console.log('Adding verification oracles...');\n    \n    // Add platform verification oracle\n    await identityContract.addVerificationOracle(\n      deployer, // Using deployer as initial oracle for testing\n      'platform_verification'\n    );\n    \n    // Add content authenticity oracle\n    await identityContract.addVerificationOracle(\n      deployer, // Using deployer as initial oracle for testing\n      'content_authenticity'\n    );\n    \n    console.log('‚úÖ Initial oracles configured');\n  }\n  \n  // Save deployment info\n  const deploymentInfo = {\n    network: network.name,\n    chainId: network.config.chainId,\n    contracts: {\n      CreativeIdentityRegistry: {\n        address: identityRegistry.address,\n        txHash: identityRegistry.transactionHash,\n      },\n      ContentLicensingContract: {\n        address: contentLicensing.address,\n        txHash: contentLicensing.transactionHash,\n      },\n      CollaborationContract: {\n        address: collaborationContract.address,\n        txHash: collaborationContract.transactionHash,\n      },\n    },\n    deployedAt: new Date().toISOString(),\n    deployer,\n  };\n  \n  console.log('\\nüìÑ Deployment Summary:');\n  console.log(JSON.stringify(deploymentInfo, null, 2));\n  \n  // Verify contracts on Etherscan/Polygonscan if not local\n  if (network.name !== 'hardhat' && network.name !== 'localhost') {\n    console.log('\\nüîç Verifying contracts on block explorer...');\n    \n    try {\n      await hre.run('verify:verify', {\n        address: identityRegistry.address,\n        constructorArguments: [],\n        contract: 'contracts/CreativeIdentityRegistry.sol:CreativeIdentityRegistry',\n      });\n      console.log('‚úÖ Creative Identity Registry verified');\n    } catch (error) {\n      console.log('‚ùå Identity Registry verification failed:', error.message);\n    }\n    \n    try {\n      await hre.run('verify:verify', {\n        address: contentLicensing.address,\n        constructorArguments: [],\n        contract: 'contracts/ContentLicensingContract.sol:ContentLicensingContract',\n      });\n      console.log('‚úÖ Content Licensing Contract verified');\n    } catch (error) {\n      console.log('‚ùå Content Licensing verification failed:', error.message);\n    }\n  }\n  \n  console.log('\\nüéâ Deployment completed successfully!');\n  console.log('\\nüìö Next steps:');\n  console.log('1. Update frontend environment variables with contract addresses');\n  console.log('2. Set up platform verification oracles');\n  console.log('3. Configure content authenticity detection services');\n  console.log('4. Test the complete identity registration flow');\n  \n  // Return deployment addresses for use in tests or other scripts\n  return {\n    identityRegistry: identityRegistry.address,\n    contentLicensing: contentLicensing.address,\n    collaborationContract: collaborationContract.address,\n  };\n};\n\nexport default func;\nfunc.tags = ['CreativeIdentity', 'all'];\nfunc.id = 'deploy_creative_identity';